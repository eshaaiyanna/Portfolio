# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eQTzxw6QK4d9Gp6vtIMOUx0ZyE40dUq6
"""

pip install yfinance

import pandas as pd
import plotly.graph_objs as go
from plotly.subplots import make_subplots
import plotly.express as px

"""Implementing the momentum strategy in Algorithmic Trading using Python:"""

stock = yf.Ticker("AAPL")
data = stock.history(period="1y")
print(data.head())

# Calculation of momentum
data['momentum'] = data['Close'].pct_change()

# Creating subplots to show momentum and buying/selling markers
figure = make_subplots(rows=2, cols=1)
figure.add_trace(go.Scatter(x=data.index,
                         y=data['Close'],
                         name='Close Price'))
figure.add_trace(go.Scatter(x=data.index,
                         y=data['momentum'],
                         name='Momentum',
                         yaxis='y2'))
# Adding the buy and sell signals
figure.add_trace(go.Scatter(x=data.loc[data['momentum'] > 0].index,
                         y=data.loc[data['momentum'] > 0]['Close'],
                         mode='markers', name='Buy',
                         marker=dict(color='green', symbol='triangle-up')))

figure.add_trace(go.Scatter(x=data.loc[data['momentum'] < 0].index,
                         y=data.loc[data['momentum'] < 0]['Close'],
                         mode='markers', name='Sell',
                         marker=dict(color='red', symbol='triangle-down')))

figure.update_layout(title='Algorithmic Trading using Momentum Strategy',
                     xaxis_title='Date',
                     yaxis_title='Price',

                     )
figure.update_yaxes(title="Momentum", secondary_y=True)
figure.show()

data['moving_average'] = data['Close'].rolling(window=20).mean()

initial_value = df['Close'].iloc[0]  # First row's close price
final_value = df['Close'].iloc[-1]    # Last row's close price

# Since we are considering one year
years = 1
# Calculate CAGR
cagr = (final_value / initial_value) ** (1 / years) - 1

# Convert to percentage
cagr_percentage = cagr * 100
print(f"CAGR: {cagr_percentage:.2f}%")

"""This indicates that the investment grew at an average annual rate of 37% over the specified period of one year."""

# Calculate Moving Average
data['Moving_Average'] = data['Close'].rolling(window=30).mean()

# Create figure
figure = go.Figure()

# Plot Close Price
figure.add_trace(go.Scatter(x=data.index,
                             y=data['Close'],
                             name='Close Price',
                             line=dict(color='yellow')))

# Plot Moving Average
figure.add_trace(go.Scatter(x=data.index,
                             y=data['Moving_Average'],
                             name='Moving Average',
                             line=dict(color='black', dash='dash')))

# Update layout
figure.update_layout(title='Close Price and Moving Average',
                     xaxis_title='Date',
                     yaxis_title='Price')

# Show the figure
figure.show()

